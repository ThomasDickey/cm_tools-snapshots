<!OPS, Version = 6.4>

<!Document,
	Default Printer	="cx",
	Final Output Device	="cx">

<!Font Definitions,
	F21	=Typewriter 10,
	F27	=Classic 10,
	F30	=Classic 12,
	F31	=Classic 12 Bold,
	F32	=Classic 12 Italic,
	F34	=Classic 14 Bold,
	F49	=Modern 12,
	F6	=Symbols 12,
	F84	=Thames 10>

<!Page,
	Starting Page # = 	Inherit>

<!Autonumber Stream, List, 1>

<!Autonumber Stream, Outline, 3,
	Level 1 Symbol Type	=Upper Roman,
	Level 2 Symbol Type	=Upper Alpha>

<!Class, bullet,
	Bottom Margin	=0 Inches,
	First Indent	=-0.25 Inches,
	Font	=F30,
	Left Margin	=0.50 Inches,
	Top Margin	=0.083 Inches>

<!Class, fixed,
	Alignment	=Left,
	Allow Page Break Within	=No,
	Bottom Margin	=0.083 Inches,
	Font	=F21,
	Hyphenation	=Off,
	Left Margin	=0.50 Inches,
	Left Tab	=0/0.64*10 Inches,
	Line Spacing	=1.308 Lines,
	Right Margin	=-1 Inches,
	Top Margin	=0.083 Inches>

<!Class, header,
	Alignment	=Left,
	Allow Page Break After	=No,
	Allow Page Break Within	=No,
	Bottom Margin	=0 Inches,
	Font	=F34,
	Top Margin	=0.193 Inches>

<!Class, options,
	Allow Page Break Within	=No,
	Bottom Margin	=0 Inches,
	First Indent	=-1 Inches,
	Font	=F30,
	Hyphenation	=Off,
	Left Margin	=1.50 Inches,
	Left Tab	=0/0.75/1.50 Inches,
	Top Margin	=0.042 Inches>

<!Class, paragraph,
	Bottom Margin	=0 Inches,
	Font	=F30,
	Left Margin	=0.25 Inches,
	Top Margin	=0.083 Inches>

<!Class, subheader,
	Alignment	=Left,
	Allow Page Break After	=No,
	Allow Page Break Within	=No,
	Bottom Margin	=0 Inches,
	Font	=F31,
	Left Margin	=0.25 Inches,
	Top Margin	=0.097 Inches>

<!Master Frame,
	Name =			"At Anchor",
	Placement =		At Anchor,
	Vertical Alignment =	Bottom + 0.03 Inches,
	Width =			0.41 Inches,
	Height =		0.137 Inches,
	Diagram =
V6,
(g9,0,0
 (E15,0,0,5,1,1,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,1,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<Page Header, Frame =
V6,
(g9,1,0
 (t14,1,4,5.698608,0.438782,2,7,0,0,,wst:clas12b,April\ 27\,\ 1990)
 (t14,2,4,2.849304,0.438782,1,7,0,0,,wst:clas12b,RCS\ \x7fci"\ Package)
 (t14,3,4,0,0.438782,0,7,0,0,,wst:clas12b,checkin)
 (E15,0,0,5,1,1,0.053333,1,15,0,0,1,0,0,0,0,5,127,7,0,0,7,1,1,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<Page Footer, Frame =
V6,
(g9,1,0
 (t14,1,4,5.698608,0.478772,2,7,0,0,,wst:clas10,)
 (t14,2,4,2.849304,0.478772,1,7,0,0,,wst:clas12b,-\ \X80a0\ -)
 (t14,3,4,0,0.478772,0,7,0,0,,wst:clas10,)
 (E15,0,0,5,1,1,0.053333,1,15,0,0,1,0,0,0,0,5,127,7,0,0,7,1,1,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<header>

NAME

<paragraph>

<F31>checkin<F0> <#1f> rcs check-in utility

<header>

USAGE

<paragraph>

<F31>checkin<F32> [options] [file-specifications]

<header>

SYNOPSIS

<paragraph>

<F31>Checkin<F0> is an extension of the RCS utility <F31>ci<F0>.  
It uses the file's modification date rather than the current date 
as the RCS delta-date.

<header>

DESCRIPTION

<paragraph>

<F31>Checkin<F0> uses the <F32>rcs<F0> utility <F31>ci<F0>.  It 
is normally invoked from the <F31>rcsput<F0> script, but may be invoked 
in a standalone manner.  <F31>Checkin<F0> differs from <F31>ci<F0> 
primarily in its treatment of the delta date: after invoking <F31>ci<F0>, 
<F31>checkin<F0> modifies the delta-date in the archive to reflect 
the file's modification date.

This is the fundamental advantage offered by <F31>checkin<F0>.  The 
ordinary <F32>rcs<F0> methodology uses the current date as the check-in 
date.  This works well only for large projects in which a central 
project administrator is responsible for controlling the versions 
of source files.  It does not work well for small projects, for which <F32>rcs
<F0>'s primary advantage is its compact storage of multiple versions 
of a file.

By using the file's modification date as a reference, you can more 
easily back up to a meaningful version <#1f> by date, rather than 
version number.

<subheader>

Archive Directory

<paragraph>

If the archive directory (e.g., <#7f>./RCS") does not exist, <F31>checkin<F0> 
creates it before invoking the <F31>ci<F0> program.

<subheader>

Set-UID Operation

<paragraph>

The rcs <F31>ci<F0> and <F31>co<F0> utilities work to a degree in 
set-uid mode (i.e., the <#7f>u+s" protection is set on the programs).  
However, the code assumes that the effective uid is <F30@U>root<F0>, 
and does not concern itself with maintaining file ownership.

The <F31>checkin<F0> package is able to run as a set-uid process 
for any particular user (e.g., the administrator of a project).  For 
example, suppose that <F49>/proj<F0> is the location of project-specific 
tools, and is owned by <F49>admin<F0>.  Then

<fixed>

cp checkin /proj<Tab><Tab># admin now owns this copy<HR>
chmod 4755 /proj/checkin<Tab># sets u+s mode

<paragraph>

Thereafter, users who invoke <F49>/proj/checkin<F0> will have 
the rights of <F49>admin<F0> <#1f> for this application.  They may 
check into <F32>rcs<F0> any files which they own, into archives which <F49>adm
in<F0> owns.  <F31>Checkin<F0> will maintain <F49>admin<F0>'s ownership 
of the archive files, and the user's ownership of his working files.

If <F31>checkin<F0> does not need the set-uid rights (e.g., 
if the user already owns the archive), <F31>checkin<F0> resets its 
effective uid to the user's.  This permits a single copy of <F31>checkin<F0> 
to be used for both configuration management as well as individual 
developers.

<subheader>

Sharing RCS Archives

<paragraph>

<F31>Checkin<F0> provides support for shared files by using <F32>rcs<F0>'s 
access lists, and providing special handling for set-uid operation:

<bullet>

<F6>S<F0><Tab>When you first archive a file using <F31>checkin<F0>, 
it invokes the <F31>rcs<F0> administrative utility to initialize 
the access list of the file.  It puts the <F30@U>effective<F0> user 
into the list.

<F6>S<F0><Tab>If <F31>checkin<F0> is running in set-uid mode, it 
puts the <F30@U>real<F0> user on the access list as well.

<paragraph>

With the access list is initialized, only those users who appear on 
an access list may place locks on files, even when running in set-uid 
mode.

<subheader>

Directory-Level Permissions

<paragraph>

Before attempting to create or lock an archive file, <F31>checkin<F0> 
looks first for the directory-level permissions which may be set with 
the <F31>permit<F0> utility.  If they exist, <F31>checkin<F0> limits 
further access rights to those permitted.

<header>

OPTIONS

<paragraph>

<F31>Checkin<F0> recognizes all of the <#7f><F31>ci<F0>" options.

If the <#7f>-<F31>k<F0>" option is used, <F31>checkin<F0> supplies 
a default log-message

<fixed>

FROM_KEYS

<paragraph>

The <#7f>-<F31>d<F0>" option of <F31>checkin<F0> causes it to display 
the actions it would perform, but not to do them (e.g., invocation 
of <F31>rcs<F0> and <F31>ci<F0>).

Use the <#7f>-<F31>x<F0>" option of <F31>checkin<F0> to direct it 
to retain the pathname when translating between working and archive 
files, e.g, <#7f><F49>path/name<F0>" becomes <#7f><F49>path/RCS/name,v<F0>".  
If the <#7f>-<F31>x<F0>" option is not set, <#7f><F49>path/name<F0>" 
becomes <#7f><F49>./RCS/name,v<F0>", and <#7f><F49>path/RCS/name,v<F0>" 
becomes <#7f><F49>./name<F0>".

<header>

OPERATIONS

<paragraph>

<F31>Checkin<F0> is used exactly as one would use <F31>ci<F0>.  
Place a lock on the file using the <#7f>-<F31>l<F0>" option with <F31>ci<F0> 
(or with <F31>co<F0>) when you wish to edit a file.  Check the file 
in using the <#7f>-<F31>u<F0>" option to retain a working copy after 
modification.

<header>

ENVIRONMENT

<paragraph>

<F31>Checkin<F0> is a C-language program.  It invokes <F31>ci<F0> (with 
an explicit path, to protect against mishaps in set-uid mode), 
and performs pre- and 
postprocessing of the archive and working file to determine 
the version to which the file's modification date applies.

<F31>Checkin<F0> uses the following environment variables:

<options,
	Left Tab =		0/0.25 Inches>

<F49>RCS_BASE<F0><Tab>is used to specify a default value for initial 
revision numbers.  If the user does not specify the initial version 
number of a file, <F31>ci<F0> assigns the value <#7f>1.1".  This 
is used to support the use of module-level version numbers, while 
preserving the relationship between changes and revisions: a new version 
is made only if the file is changed.

<Tab>The directory-level revision set by the <F31>permit<F0> 
utility may override this environment variable. See <F32>baseline<F0> 
and <F32>permit<F0> for more details.

<options>

<F49>RCS_COMMENT<F0> is set to a string controlling the initial setting 
of the rcs <#7f>-<F31>c<F0>" option.  For example, the strings

<fixed>

<Tab><Tab>setenv RCS_COMMENT '/.c/ *> /'

<options>

<Tab>and

<fixed>

<Tab><Tab>setenv RCS_COMMENT '/.d/# /,/.bas/REM /'

<options>

<Tab>define comment-prefixes for <#7f>.c", <#7f>.d" and <#7f>.bas" 
suffixes.  (The suffix is delimited with the first <#7f>." in the 
leaf-name).

<F49>RCS_DIR<F0><Tab>if defined, specifies the directory in which <F32>rcs
<F0> archive files are found.  Normally files are found in <#7f>./RCS".

<options,
	Left Tab =		0/0.25 Inches>

<F49>TZ<F0><Tab>is the unix time zone, which is overridden internally 
so that file modification dates are independent of the local time 
zone.

<header>

FILES

<paragraph>

<F31>Checkin<F0> uses the following files

<options>

<F49>ci<F0><Tab>the RCS check-in program

<F49>rcs<F0><Tab>the RCS administrative program

<header>

ANTICIPATED CHANGES

<paragraph>

<F31>Checkin<F0> does not currently handle branch deltas.

<header>

SEE ALSO

<paragraph>

baseline, rcsput, permit, ded, ci<SP>(1), co<SP>(1), rcs<SP>(1)

<header>

AUTHOR:

<paragraph>

Thomas Dickey (Software Productivity Consortium).

